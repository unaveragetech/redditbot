# .github/workflows/reddit_bot.yml
name: Reddit Bot Automation

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  issues:
    types: [opened]  # Triggered when an issue is opened

jobs:
  run-reddit-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract URL or Query
        id: extract_info
        run: |
          issue_title="$(jq -r '.issue.title' < $GITHUB_EVENT_PATH)"
          issue_body="$(jq -r '.issue.body' < $GITHUB_EVENT_PATH)"
          
          # Check if title or body contains a Reddit URL
          url_regex="https:\/\/(www\.)?reddit\.com\/r\/[^ ]+"
          if [[ $issue_title =~ $url_regex ]]; then
            post_url="${BASH_REMATCH[0]}"
            echo "URL found in title: $post_url"
            echo "post_url=$post_url" >> $GITHUB_ENV
          elif [[ $issue_body =~ $url_regex ]]; then
            post_url="${BASH_REMATCH[0]}"
            echo "URL found in body: $post_url"
            echo "post_url=$post_url" >> $GITHUB_ENV
          else
            # No URL found; set the title as the query
            query="$issue_title"
            echo "No URL found; using title as query: $query"
            echo "query=$query" >> $GITHUB_ENV
          fi

      - name: Run Reddit Bot
        env:
          CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          USERNAME: ${{ secrets.REDDIT_USERNAME }}
          PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
          USER_AGENT: 'your_bot_user_agent'
        run: |
          if [ "${{ github.event_name }}" == "issues" ]; then
            # Check if post_url is set in the environment
            if [ -n "$post_url" ]; then
              response=$(python reddit_bot.py --manual "$post_url")
            elif [ -n "$query" ]; then
              response=$(python reddit_bot.py --query "$query")
            else
              echo "Error: Neither a URL nor a query was found in the issue."
              exit 1
            fi
          else
            response=$(python reddit_bot.py)
          fi

          # Log the response to a file
          echo "$(date) - $post_url - Response: $response" >> reddit_responses.log

          # Check for duplicate response
          if grep -q "$(echo "$post_url" | sed 's/[^a-zA-Z0-9\/:._-]//g') - Response: $(echo "$response" | sed 's/[^a-zA-Z0-9.,?!_\'\" -]//g')" reddit_responses.log; then
            echo "Duplicate response detected for post: $post_url. Skipping."
            exit 0
          fi
