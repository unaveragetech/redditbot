name: Reddit Bot Automation

on:
  schedule:
    - cron: '*/30 * * * *'  # Check for new posts every 30 minutes
    - cron: '0 * * * *'     # Run the full system every hour
  issues:
    types: [opened]         # Triggered when an issue is opened

jobs:
  run-reddit-bot:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          persist-credentials: true  # Required to push back to the repo

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install Ollama dependencies
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh

      # Step 4: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Extract URL or Query from the issue
      - name: Extract URL or Query
        id: extract_info
        run: |
          issue_title="$(jq -r '.issue.title' < $GITHUB_EVENT_PATH)"
          issue_body="$(jq -r '.issue.body' < $GITHUB_EVENT_PATH)"
          
          # Check if title or body contains a Reddit URL
          url_regex="https:\/\/(www\.)?reddit\.com\/r\/[^ ]+"
          if [[ $issue_title =~ $url_regex ]]; then
            post_url="${BASH_REMATCH[0]}"
            echo "URL found in title: $post_url"
            echo "post_url=$post_url" >> $GITHUB_ENV
          elif [[ $issue_body =~ $url_regex ]]; then
            post_url="${BASH_REMATCH[0]}"
            echo "URL found in body: $post_url"
            echo "post_url=$post_url" >> $GITHUB_ENV
          else
            # No URL found; set the title as the query
            query="$issue_title"
            echo "No URL found; using title as query: $query"
            echo "query=$query" >> $GITHUB_ENV
          fi

      # Step 6: Run the Reddit Bot
      - name: Run Reddit Bot
        env:
          CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          USERNAME: ${{ secrets.REDDIT_USERNAME }}
          PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
          USER_AGENT: 'your_bot_user_agent'
        run: |
          response=""
          post_url="${{ env.post_url }}"
          query="${{ env.query }}"

          # Log start of run
          echo "$(date) - Workflow triggered: $GITHUB_EVENT_NAME" >> reddit_responses.log

          if [ "${{ github.event_name }}" == "issues" ]; then
            # Check for the !botrun and !botrunn commands in the issue body
            if echo "$issue_body" | grep -q "!botrun("; then
              command=$(echo "$issue_body" | grep -o "!botrun([^)]*)")
              response=$(python runner.py "$command")
            elif echo "$issue_body" | grep -q "!botrunn("; then
              command=$(echo "$issue_body" | grep -o "!botrunn([^)]*)")
              response=$(python runner.py "$command")
            elif [ -n "$post_url" ]; then
              response=$(python reddit_bot.py --manual "$post_url")
            elif [ -n "$query" ]; then
              response=$(python reddit_bot.py --query "$query")
            else
              echo "Error: Neither a URL nor a query was found in the issue."
              exit 1
            fi
          else
            response=$(python reddit_bot.py)
          fi

          # Log the response and post details
          echo "$(date) - URL/Query: ${post_url:-$query} - Response: $response" >> reddit_responses.log

      # Step 7: Commit and push changes
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add reddit_responses.log
          git commit -m "Update reddit_responses.log with new responses" || echo "No changes to commit"
          git push
